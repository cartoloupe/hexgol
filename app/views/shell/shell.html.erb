<div class="hexgol"><h1>HEXGOL</h1></div>
<script>
  var reddot = Raphael(0,0,200,100);
  drawCircle(reddot,115,40,5)
</script>
<p>Hex-based <a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Game of Life</a></p>

<% xorigin,yorigin,multiplier = 150,150,20 %>

<%= button_to "next bicycle", root_path %>
<br>
<%= button_to "restart", shell_restart_path %>
<br>
<%= button_to "add", shell_add_cell_path %>
<br>
<%= button_to "refresh", shell_refresh_path %>
<br>

<% @board.cells.each do |cell| %>
  <li class="live"><%= cell.to_xy(multiplier,[xorigin,yorigin]).map{|n| n.floor} %></li>
<% end %>


<% @gray_points.each do |cell| %>
  <li class="dead"><%= cell.to_xy(multiplier,[xorigin,yorigin]).map{|n| n.floor} %></li>
<% end %>

<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
Round: <%= session[:step] %>
<br>
<br>
Living: <%= session[:coordinates] %>
<br>
to_xy: <%= @board.cells.map(&:to_xy) %>
<br>

<div class="xorigin"><%= xorigin %></div>
<div class="yorigin"><%= yorigin %></div>
<div class="multiplier"><%= multiplier %></div>

<script>
  var xorigin = $('.xorigin').text()
  var yorigin = $('.yorigin').text()
  var multiplier = $('.multiplier').text()
  var paper = Raphael(100,100,800,800);
  drawCircle(paper,xorigin,yorigin,2)

  function convertToCoordinates(x,y){
    //console.log("covertToCoordinates for: " + x + "," + y);
    // subtract origin
    xx = x - xorigin;
    yy = y - yorigin;

    // divide by multiplier
    xxx = xx / multiplier;
    yyy = yy / multiplier;

    // calculate hypotenuse
    d = Math.sqrt( ((xxx * xxx) + (yyy * yyy)) );

    // calculate theta
    theta = Math.asin(yyy / d);

    // calculate phi
    phi = (Math.PI/3) - theta;

    // calculate hex x and hex y
    hexx = (Math.sin(phi) / Math.sin(2 * Math.PI / 3)) * d;
    hexy = (Math.sin(theta) / Math.sin(2 * Math.PI / 3)) * d;

    // round
    roundx = Math.round(hexx);
    roundy = Math.round(hexy);

    return [0,roundx,60,roundy];
  };

  function trackPoints(e) {
    allPoints.push({ x: e.offsetX, y: e.offsetY });
  };

  function convertAndPost(points){
    var url = '/shell/add_cell';
    var theCoordinates = points.map(function(point){
      //console.log(" " + point.x + "," + point.y);
      return convertToCoordinates(point.x,point.y);
    });

    console.log(theCoordinates);

    $.ajax({
      type: "POST",
      url: url,
      data: { coordinates : theCoordinates }
    });
  };

  var allPoints = [];
  $( document ).ready(function() {
    $("svg").mouseup(function (e) {
      $(this).unbind("mousemove", trackPoints);
      //console.log(allPoints);

      convertAndPost(allPoints);

      setInterval(function() {
        $("input[type=submit]")[3].click()
      }, 100);

    }).mousedown(function (e) {
      $(this).bind("mousemove", trackPoints);
      $(this).bind("click", trackPoints);
      allPoints = [];
      trackPoints(e);
    });
  });

  $( document ).ready(function() {
    $( "li.dead" ).each(function() {
      a = $(this).text();
      b = /\[([-\d]+), ([-\d]+)\]/;
      c = b.exec(a);
      hex = drawHexagon(paper, c[1], c[2], multiplier / 2);
      hex.attr("stroke", "#e0e0e0");
    });
    $( "li.live" ).each(function() {
      a = $(this).text();
      b = /\[([-\d]+), ([-\d]+)\]/;
      c = b.exec(a);
      //console.log(c[1],c[2]);
      //drawCircle(paper, c[1], c[2], 5)
      drawHexagon(paper, c[1], c[2], multiplier / 2);
    });
  });



</script>

<!-- <iframe width="560" height="315" src="//www.youtube.com/embed/xP5-iIeKXE8" frameborder="0" allowfullscreen></iframe>
-->



